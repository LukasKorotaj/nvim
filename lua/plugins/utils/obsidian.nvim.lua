return {
  'obsidian-nvim/obsidian.nvim',
  version = '*', -- recommended, use latest release instead of latest commit
  lazy = true,
  ft = 'markdown',
  -- Replace the above line with this if you only want to load obsidian.nvim for markdown files in your vault:
  -- event = {
  --   -- If you want to use the home shortcut '~' here you need to call 'vim.fn.expand'.
  --   -- E.g. "BufReadPre " .. vim.fn.expand "~" .. "/my-vault/*.md"
  --   -- refer to `:h file-pattern` for more examples
  --   "BufReadPre path/to/my-vault/*.md",
  --   "BufNewFile path/to/my-vault/*.md",
  -- },
  dependencies = {
    -- Required.
    'nvim-lua/plenary.nvim',

    -- see below for full list of optional dependencies ðŸ‘‡
  },
  opts = {
    workspaces = {
      {
        name = 'Planner',
        path = '/home/lukas/Sync/Planner/',
      },
      {
        name = 'telekasten',
        path = '/home/lukas/Sync/telekasten/',
      },
      {
        name = 'chaos',
        path = '/home/lukas/Sync/chaos/',
      },
    },
    completion = {
      nvim_cmp = false,
      blink = true,
      min_chars = 1,
      create_new = true,
    },
    new_notes_location = 'current_dir',
    disable_frontmatter = true,
    legacy_commands = false,
    templates = {
      folder = 'Templates',
    },
    note_id_func = function(title)
      -- Create note IDs in a Zettelkasten format with a readable timestamp
      -- Example: "202508151430-my-new-note"

      -- Get current date and time in YYYYMMDDHHMM format
      local timestamp = os.date '%Y%m%d%H%M'

      local suffix = ''
      if title ~= nil then
        -- Transform title into a valid file name
        suffix = title:gsub(' ', '-'):gsub('[^A-Za-z0-9-]', ''):lower()
      else
        -- If title is nil, add 4 random uppercase letters
        for _ = 1, 4 do
          suffix = suffix .. string.char(math.random(65, 90))
        end
      end

      return timestamp .. '-' .. suffix
    end,
    note_frontmatter_func = function(note)
      if note.title then
        note:add_alias(note.title)
      end

      -- Force the "autogenerated" tag for notes created with blink.cmp
      local tags = note.tags or {}
      if require('obsidian').completion.blink then
        table.insert(tags, 'autogenerated')
      end

      local out = { id = note.id, aliases = note.aliases, tags = tags }

      if note.metadata ~= nil and not vim.tbl_isempty(note.metadata) then
        for k, v in pairs(note.metadata) do
          out[k] = v
        end
      end

      return out
    end,
  },
}
